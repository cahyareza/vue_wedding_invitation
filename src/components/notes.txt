onMounted(() => {
    fetch(' http://localhost:3000/couples')
    .then(response => response.json())
    .then(data => {
        state.couples = data
    });
});

<script>
import { inject, computed } from 'vue'

export default {
    name: 'GroomBride',
    setup() {
        const store = inject('store');

        const couples = computed(() => store.state.couples); 

        store.actions.getCouples();

        return {
            couples
        };
    }
}
</script>


import { ref } from 'vue'
const countdown = ref(null)


// Handler for countdown
const createTimer = (target, container, cb) => {
   // target => UNIX time target
   // Container => variable for return result
   // cb => callback if countdown finish
   const now = new Date().getTime()
   const distance = target - now
   if ( distance > 0 ) {
     const hari = Math.floor(distance / (1000 * 60 * 60 * 24));
     const jam = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
     const menit = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
     const detik = Math.floor((distance % (1000 * 60)) / 1000);
      
     container.value = { hari, jam, menit, detik }
     //alert(JSON.stringify(container))
      
     if (hari === 0 && jam === 0 && menit === 0 && detik === 0 ) cb()
   } else {
     container.value = { hari: 0, jam: 0, menit: 0, detik: 0 }
   } 
}
const timer = setInterval(() => {
  createTimer(new Date('2022-10-8 19:30').getTime(), countdown, () => {
    clearInterval(timer)
  }),
  console.log(countdown.value);
}, 1000)





import useTimer from "../../../hooks/useTimer";
import { inject, computed } from 'vue'

const store = inject('store');
// console.log(store);

const acara = computed(() => store.state.acara); 

store.actions.getAcara();
// console.log(acara.value);

// import hooks method
const { createTimer, countdown } = useTimer();

createTimer;

const timer = setInterval(() => {new Date("2022-07-8 19:30").getTime(), 
  countdown, 
  () => {
    clearInterval(timer)
  }}, 
  1000);


<script setup>
import { onMounted } from "vue";
import { atcb_init } from 'add-to-calendar-button';
import 'add-to-calendar-button/assets/css/atcb.css';
import { inject } from 'vue';

const store = inject('store');

// const addtocalender = computed(() => store.state.addtocalender);

store.actions.getAddtocalender();

onMounted(() => {
  atcb_init();
})

</script>


onMounted(() => {

    axios
        .get("http://localhost:3000/hadir")
        .then((response) => setHadir(response.data))
        .catch((error) => console.log(error));
})



const default_button = ref(null)

onMounted(async () => {
    await store.actions.getAddtocalender();
    // console.log(addtocalender);
    const rawaddtocalender = toRaw(addtocalender.value);

 
    const config = rawaddtocalender
    const button = default_button.value
    button.addEventListener('click', () => atcb_action(config, button));
})



const lightbox = document.createElement('div')
lightbox.id = 'lightbox'
document.body.appendChild(lightbox)

const images = document.querySelectorAll('img')
images.forEach(image => {
  image.addEventListener('click', function (e) => {
    lightbox.classList.add('active')
    const img = document.createElement('img')
    img.src = image.src
    while (lightbox.firstChild) {
      lightbox.removeChild(lightbox.firstChild)
    }
    lightbox.appendChild(img)
  })
})

lightbox.addEventListener('click', e => {
  if (e.target !== e.currentTarget) return
  lightbox.classList.remove('active')
})


<div class="grid">
    <img src="https://source.unsplash.com/400x400?mountain">
    <img src="https://source.unsplash.com/400x400?nature">
    <img src="https://source.unsplash.com/400x400?valley">
    <img src="https://source.unsplash.com/400x400?beach">
    <img src="https://source.unsplash.com/400x400?ocean">
    <img src="https://source.unsplash.com/400x400?water">
    <img src="https://source.unsplash.com/400x400?trees">
    <img src="https://source.unsplash.com/400x400?lake">
</div>


<template>
  <div class="section">
      <div class="grid">
          <img src="https://source.unsplash.com/400x400?mountain">
          <img src="https://source.unsplash.com/400x400?nature">
          <img src="https://source.unsplash.com/400x400?valley">
          <img src="https://source.unsplash.com/400x400?beach">
          <img src="https://source.unsplash.com/400x400?ocean">
          <img src="https://source.unsplash.com/400x400?water">
          <img src="https://source.unsplash.com/400x400?trees">
          <img src="https://source.unsplash.com/400x400?lake">
      </div>
  </div>
</template>



<script setup>

</script>



<style lang="scss" scoped>

body {
  margin: 0;
}

.grid {
  display: grid;
  grid-template-columns: repeat(2, 160px);
  justify-content: center;
  align-content: center;
  grid-gap: 10px;
  height: 780px;
}

.grid img {
  width: 200px;
  height: 190px;
  cursor: pointer;
}

#lightbox {
  position: fixed;
  z-index: 1000;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, .8);
  display: none;
}

#lightbox.active {
  display: flex;
  justify-content: center;
  align-items: center;
}

#lightbox img {
  max-width: 90%;
  max-height: 80%;
  padding: 4px;
  background-color: black;
  border: 2px solid white;
}

</style>